@page "/"

<PageTitle>Dashboard</PageTitle>
@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using Webassembly.Models;
@using Webassembly.Services;

@inject HttpClient httpClient
@inject PartsService PartService


@*  StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges" *@

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
	<MudText Class="mb-5">Basic Crud operations with EF and Sqlite</MudText>



	<MudText Typo="Typo.h3">Inventory</MudText>
	<MudDataGrid T="Part" Virtualize="true" FixedHeader="true" Height="400px"
				 Items="@Parts" ReadOnly="@_readOnly" EditMode="@(DataGridEditMode.Form)"
				 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
				 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">

		<Columns>
			<PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
			<PropertyColumn Property="x => x.Category" />
			<PropertyColumn Property="x => x.Subcategory" />
			<PropertyColumn Property="x => x.Name" />
			<PropertyColumn Property="x => x.Stock" />
			<PropertyColumn Property="x => ReturnDollars(x.PriceCents)"  Title="Price"/>
			<PropertyColumn Property="x => x.Location" Title="Location" />


			<TemplateColumn CellClass="d-flex justify-center" Title="ToolBox">
				<CellTemplate>
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => Delete(context.Item)" />
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Satellite" Href="@context.Item.Url" />
				</CellTemplate>
			</TemplateColumn>





		</Columns>
	</MudDataGrid>

	<MudExpansionPanels Style="flex:1">
		<MudExpansionPanel Text="Show Events">
			@foreach (var message in _events)
			{
				<MudText Typo="@Typo.body2">@message</MudText>
			}
			@if (_events.Count > 0)
			{
				<div class="d-flex">
					<MudSpacer />
					<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
				</div>
			}
		</MudExpansionPanel>
	</MudExpansionPanels>

</MudContainer>

@code {
	private IEnumerable<Part> Parts = new List<Part>();
	private bool _readOnly;
	private bool _isCellEditMode;
	private List<string> _events = new();
	private bool _editTriggerRowClick;

	protected override async Task OnInitializedAsync()
	{
		Parts = await PartService.GetAllPartsAsync();
	}

	private string ReturnDollars(long cents)
	{

		return String.Format("{0:C}", cents); ;

	}


	void StartedEditingItem(Part item)
	{
		_events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

	void CanceledEditingItem(Part item)
	{
		_events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

	async Task CommittedItemChanges(Part item)
	{
		_events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
		await PartService.EditPart(item);
	}

	async Task Delete(Part item)
	{
		await PartService.DeletePart(item);
		Parts = await PartService.GetAllPartsAsync();
		_events.Insert(0, $"Event = Deleted, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

}

